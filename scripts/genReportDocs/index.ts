import { getRepoReports, OrgReports, OverallReports, RepoReports, getOrgReports, getOverallReports } from '../../src/reports/getReports'

import { getMarkdownTable } from 'markdown-table-ts'
import * as fs from 'fs'
import path from 'path'

function generateReportDocs (): void {
  const parentDir = path.join(__dirname, '../..')
  const filePath = path.join(parentDir, 'reports.md')

  fs.writeFile(filePath, getReportMarkdownFile(), { encoding: 'utf16le' }, (error) => {
    if (error != null) {
      let message
      if (error instanceof Error) message = error.message
      else message = String(error)
      throw new Error(`Error writing reports.md file: ${message}`)
    } else {
      console.log('reports.md file written successfully!')
    }
  })
}

function getReportMarkdownFile (): string {
  return `
# Reports
> **Note:** THIS FILE IS AUTOMATICALLY GENERATED ON COMMIT. IT SHOULD NOT BE EDITED MANUALLY.
    
>  To regenerate this file, run :
    \`\`\`npm run genReportDocs\`\`\`

Reports are classes that aggregate the data gathered by a rule and output it to a csv and json file. They run very quickly and therefore have no need to be cached.
    
There are three main types of reports: 
    
Repo: Repo reports aggregate data on things we care about across repos in the org.

Org: Reports on the organization the repos are found in.

Overall: Reports that output data about every repo based on the repo reports.

## Repo Reports
${getRepoReportTable()}
    
## Organization Reports
${getOrganizationReportTable()}
    
## Overall Reports
${getOverallReportTable()}
    `
}

function getRepoReportTable (): string {
  const head: string[] = ['Report', 'Type', 'Output Directory', 'Number of Output Files Generated', 'Description of Output', 'Contributes to Overall HealthScore Report', 'Weight']
  const body: string[][] = []

  const repoReports: RepoReports = getRepoReports()
  for (const report of Object.values(repoReports)) {
    body.push([
      report.name,
      report.type,
      report.outputDir,
      report.numberOfFilesOutputDescription,
      report.description,
      (!(report.weight === 0)).toString(),
      report.weight.toString()
    ])
  }

  return getMarkdownTable({
    table: {
      head,
      body
    }
  })
}

function getOrganizationReportTable (): string {
  const head: string[] = ['Report', 'Output Directory', 'Number of Output Files Generated', 'Description of Output']
  const body: string[][] = []

  const orgReports: OrgReports = getOrgReports()
  for (const report of Object.values(orgReports)) {
    body.push([
      report.name,
      report.outputDir,
      report.numberOfFilesOutputDescription,
      report.description
    ])
  }

  return getMarkdownTable({
    table: {
      head,
      body
    }
  })
}

function getOverallReportTable (): string {
  const head: string[] = ['Report', 'Output Directory', 'Number of Output Files Generated', 'Description of Output']
  const body: string[][] = []

  const overallReports: OverallReports = getOverallReports()
  for (const report of Object.values(overallReports)) {
    body.push([
      report.name,
      report.outputDir,
      report.numberOfFilesOutputDescription,
      report.description
    ])
  }

  return getMarkdownTable({
    table: {
      head,
      body
    }
  })
}

generateReportDocs()
